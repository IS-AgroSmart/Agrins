# Generated by Django 3.0.1 on 2022-10-30 00:29

import core.utils.disk_space_tracking
from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('organization', models.CharField(blank=True, max_length=20)),
                ('phone', models.CharField(blank=True, max_length=15)),
                ('profession', models.CharField(blank=True, max_length=20)),
                ('city', models.CharField(blank=True, max_length=50)),
                ('type', models.CharField(choices=[('DEMO_USER', 'DemoUser'), ('ACTIVE', 'Active'), ('DELETED', 'Deleted'), ('ADMIN', 'Admin')], default='ACTIVE', max_length=20)),
                ('used_space', models.PositiveIntegerField(default=0)),
                ('maximum_space', models.PositiveIntegerField(default=47185920)),
                ('remaining_images', models.PositiveIntegerField(default=0)),
                ('image_month_quota', models.PositiveIntegerField(default=3000)),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            bases=(core.utils.disk_space_tracking.DiskRelationTrackerMixin, models.Model),
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='BlockCriteria',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(choices=[('USER_NAME', 'UserName'), ('IP', 'Ip'), ('EMAIL', 'Email'), ('DOMAIN', 'Domain')], max_length=20)),
                ('ip', models.GenericIPAddressField(null=True)),
                ('value', models.CharField(max_length=80, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='UserProject',
            fields=[
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=50)),
                ('description', models.TextField()),
                ('deleted', models.BooleanField(default=False)),
                ('must_create_workspace', models.BooleanField(default=True)),
                ('is_demo', models.BooleanField(default=False)),
                ('used_space', models.PositiveIntegerField(default=0)),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='user_projects', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
            bases=(core.utils.disk_space_tracking.DiskSpaceTrackerMixin, models.Model),
        ),
        migrations.CreateModel(
            name='Artifact',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(choices=[('ORTHOMOSAIC', 'Orthomosaic'), ('SHAPEFILE', 'Shapefile'), ('INDEX', 'Index')], max_length=20)),
                ('name', models.CharField(max_length=256)),
                ('title', models.CharField(max_length=256)),
                ('project', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='artifacts', to='core.UserProject')),
            ],
        ),
        migrations.AddField(
            model_name='user',
            name='demo_projects',
            field=models.ManyToManyField(related_name='demo_users', to='core.UserProject'),
        ),
        migrations.AddField(
            model_name='user',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='user',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
    ]
